{"version":3,"sources":["Structure.js","Symbol.js","App.js","serviceWorker.js","index.js"],"names":["Structure","useState","value","setValue","result","setResult","expression","addValue","v","oldvalue","clear","Result","eval","className","click","allClear","showResult","Symbol","props","map","val","index","onClick","e","target","add","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"stBAIA,SAASA,YAAa,IAAD,UACKC,oDAAS,IADd,+KACZC,MADY,cACNC,SADM,yBAEOF,oDAAS,IAFhB,gLAEZG,OAFY,cAELC,UAFK,cAIdC,WAAW,aAKXC,SAAS,SAACC,GACdL,UAAS,SAACM,GACV,OAAOA,EAAUD,MAKbE,MAAM,SAACF,GACZL,UAAS,SAACM,GACV,MAAO,OAKHE,OAAO,SAAPA,SACJR,UAAS,SAACM,UACV,IACA,OAAOG,KAAKH,UAEZ,eACD,MAAO,aAON,OACE,kEAAKI,UAAU,eACf,kEAAKA,UAAU,QACf,uEAAUX,MAAOA,QAEhB,2DAAC,0CAAD,CAAQY,MAAOP,SAAUQ,SAAUL,MAAOM,WAAYL,WAO5CX,iC,6BCpDf,oBAwCeiB,IAvCf,SAAgBC,GAEf,IAKMR,EAAM,WACbQ,EAAMH,YAICX,EAAO,WACZc,EAAMF,cAIJ,OACA,6BAhBQ,CAAC,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAkB7EG,KAAI,SAACC,EAAIC,GACf,MAAQ,MAALD,EACK,4BAAQE,QAASZ,EAAOR,MAAOkB,GAAMA,GAEjC,KAALA,EACC,4BAAQE,QAASlB,EAAQF,MAAOkB,GAAMA,GAGtC,4BAAQE,QAAS,SAACC,IAzBtB,SAACA,GACVL,EAAMJ,MAAMS,EAAEC,OAAOtB,OAwBeuB,CAAIF,IAAKrB,MAAOkB,GAAMA,S,gKClB7CM,MARf,WACE,OAEI,kBAAC1B,EAAA,EAAD,OCMc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc90b6bc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './structure.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport Symbol from './Symbol.js';\r\nfunction Structure() {\r\n  const [value,setValue]= useState(\"\");\r\n  const [result,setResult]= useState(\"\");\r\n \r\n const expression=()=>{\r\n\r\n\r\n }\r\n \r\n const addValue=(v)=>{\r\n   setValue((oldvalue)=>{\r\n   return oldvalue+=v;\r\n\r\n   })\r\n\r\n }\r\n const clear=(v)=>{\r\n  setValue((oldvalue)=>{\r\n  return \"\";\r\n\r\n  })\r\n\r\n}\r\nconst Result=()=>{\r\n  setValue((oldvalue)=>{\r\n  try{\r\n  return eval(oldvalue);\r\n  }\r\n  catch{\r\n return \"Wrong\";\r\n  }\r\n\r\n  })\r\n\r\n}\r\n \r\n  return (\r\n    <div className=\"maincontent\">\r\n    <div className=\"main\">\r\n    <textarea value={value}/>\r\n\r\n     <Symbol click={addValue} allClear={clear} showResult={Result}/>\r\n     </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Structure;\r\n","import React from 'react';\r\nfunction Symbol(props) {\r\n \r\n let symbol=['%','(',')','CE','1','2','3','+','4','5','6','-','7','8','9','*','0','.','=','/'];\r\n const add=(e)=>{\r\n  props.click(e.target.value);\r\n }\r\n\r\n const clear=()=>{\r\nprops.allClear();\r\n\r\n }\r\n \r\n const result=()=>{\r\n  props.showResult();\r\n  \r\n   }\r\n \r\n    return (\r\n    <div >\r\n\r\n     {symbol.map((val,index)=>{\r\n       if(val=='CE'){\r\n        return <button onClick={clear} value={val}>{val}</button>\r\n      }\r\n      else if(val=='='){\r\n        return <button onClick={result} value={val}>{val}</button>\r\n      }\r\n      else{\r\n        return <button onClick={(e)=>{add(e)}} value={val}>{val}</button>\r\n      }\r\n       \r\n\r\n\r\n     })}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Symbol;\r\n","import React from 'react';\nimport Structure from './Structure.js';\n\nfunction App() {\n  return (\n   \n      <Structure/>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}